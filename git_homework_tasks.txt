FIRST PART

1. Посмотреть где я --- pwd
2. Создать папку --- mkdir lesson_1
3. Зайти в папку --- cd !$
4. Создать 3 папки --- mkdir -p {qa_1,qa_2,qa_3} OR qa_1 qa_2 qa_3
5. Зайти в любую папку --- cd qa_1
6. Создать 5 файлов (3 txt, 2 json) --- touch aa.txt bb.txt cc.txt dd.json ee.json
7. Создать 3 папки
8. Вывести список содержимого папки --- ls -la
9. + Открыть любой txt файл --- cat aa.txt
10. + написать туда что-нибудь, любой текст. --- cat >> aa.txt hi there login uwu
11. + сохранить и выйти. --- enter ctrl+C
12. Выйти из папки на уровень выше --- cd ..
—
13. переместить любые 2 файла, которые вы создали, в любую другую папку. --- mv qa_1/{bb.txt,cc.txt} qa_2
14. скопировать любые 2 файла, которые вы создали, в любую другую папку. --- cp qa_1/{dd.json,ee.json} qa_3
15. Найти файл по имени --- find -name aa
16. просмотреть содержимое в реальном времени (команда grep) изучите как она работает. --- grep 'login' aa.txt
17. вывести несколько первых строк из текстового файла --- head -n 2 aa.txt
18. вывести несколько последних строк из текстового файла --- tail -n aa.txt
19. просмотреть содержимое длинного файла (команда less) изучите как она работает. --- less aa.txt
20. вывести дату и время --- date

Задание *
1. Отправить http запрос на сервер.
http://162.55.220.72:5005/terminal-hw-request
 --- curl http://162.55.220.72:5005/terminal-hw-request
     curl "http://162.55.220.72:5005/get_method?name="nana"&age="11""

cat >> script.sh

#!/bin/bash

D:\qa_29_group\lesson_1\qa_1
cd !$
mkdir -p {qa_1,qa_2,qa_3}
cd qa_1
touch aa.txt bb.txt cc.txt dd.json ee.json
ls -la
mv qa_1/{bb.txt,cc.txt} qa_2

chmod +x sc1.sh
bash script.sh


SECOND PART

TXT
1.	Создать внешний репозиторий c названием TXT.
2.	Клонировать репозиторий TXT на локальный компьютер.  // git clone *link*
3.	Внутри локального TXT создать файл “new.txt”. // vim new.txt
4.	Добавить файл под гит. // git add new.txt
5.	Закоммитить файл. // git commit -m "create new.txt"
6.	Отправить файл на внешний GitHub репозиторий. // git push
7.	Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
8.	Отправить изменения на внешний репозиторий. // git commit -am "add modify new.json" -> git push
9.	Создать файл preferences.txt // vim preferences.txt
10.	В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
11.	Создать файл skills.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT // vim skills.txt
12.	Отправить сразу 2 файла на внешний репозиторий. // git add . -> git commit -m "add preferences.txt" -> git push
13.	На веб интерфейсе создать файл bug_report.txt. // create new
14.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
15.	На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT. // change, just texting
16.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
17.	Синхронизировать внешний и локальный репозиторий TXT // git pull (потом git fetch для проверки)


JSON
18.	Создать внешний репозиторий c названием JSON.
19.	Клонировать репозиторий JSON на локальный компьютер. // git clone *link*
20.	Внутри локального JSON создать файл “new.json”. // vim new.jdon
21.	Добавить файл под гит. // git add new.json
22.	Закоммитить файл. // git commit -m "create new.json"
23.	Отправить файл на внешний GitHub репозиторий. // git push
24.	Отредактировать содержание файла “new.json” // vim new.json
25.	Отправить изменения на внешний репозиторий. // git commit -am "add modify new.json" -> git push
26.	Создать файл preferences.json // vim preferences.json
27.	В файл preferences.json добавить информацию о своих предпочтениях 
28.	Создать файл skills.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON // vim skills.json
29.	Отправить сразу 2 файла на внешний репозиторий. // git add. -> git commit -m "add preferences.json" -> git push
30.	На веб интерфейсе создать файл bug_report.json. // create new
31.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
32.	На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.// change, just texting
33.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
34.	Синхронизировать внешний и локальный репозиторий JSON // git pull (потом git fetch для проверки)


XML
35.	Создать внешний репозиторий c названием XML.                                                                                                                                                                                                                                                                                          
36.	Клонировать репозиторий XML на локальный компьютер. // git clone *link*
37.	Внутри локального XML создать файл “new.xml”. // vim new.xml
38.	Добавить файл под гит. // git add new.xml
39.	Закоммитить файл. // git commit -m "create new.xml"
40.	Отправить файл на внешний GitHub репозиторий. git push
41.	Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
42.	Отправить изменения на внешний репозиторий. git commit -am "add modify new.xml" -> git push
43.	Создать файл preferences.xml // vim preferences.xml
44.	В файл preferences.xml добавить информацию о своих предпочтениях 
45.	Создать файл skills.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
46.	Отправить сразу 2 файла на внешний репозиторий. // git add . -> git commit -m "add preferences.xml" -> git push
47.	На веб интерфейсе создать файл bug_report.xml. // create new
48.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
49.	На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML. // change, just texting
50.	Сделать Commit changes (сохранить) изменения на веб интерфейсе. // commit button
51.	Синхронизировать внешний и локальный репозиторий XML // git pull (потом git fetch для проверки)

